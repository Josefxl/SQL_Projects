# SQL_practice
Query practice using the Sakila database

-- 1a. Display the first and last names of all actors from the table actor
SELECT first_name, last_name
FROM actor


-- Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name
SELECT UPPER(CONCAT(first_name, ' ', last_name)) AS `Actor Name`
FROM actor


/*2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe.
" What is one query would you use to obtain this information? */
SELECT actor_id, first_name, last_name
FROM actor
WHERE first_name = "Joe"


-- Find all actors whose last name contain the letters GEN
SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name LIKE "%GEN%"


/* 2c. Find all actors whose last names contain the letters LI.
 This time, order the rows by last name and first name, in that order */

 
SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name LIKE "%LI%"
ORDER BY last_name, first_name


/* 2c. 2d. Using IN, display the country_id and country columns of the following countries:
 Afghanistan, Bangladesh, and China */
 SELECT country_id, country
 FROM country
 WHERE country IN ('Afghanistan', 'Bangladesh', 'China')

 
-- 3a. Add a middle_name column to the table actor. Position it between first_name and last_name
ALTER TABLE actor
ADD middle_name varchar(45) AFTER `first_name`


/* 3b. You realize that some of these actors have tremendously long last names. 
Change the data type of the middle_name column to blobs. */
ALTER TABLE actor
MODIFY COLUMN middle_name BLOB


-- 3c. Now delete the middle_name column
ALTER TABLE actor
DROP COLUMN middle_name


-- 4a. List the last names of actors, as well as how many actors have that last name.
SELECT last_name, COUNT(last_name) AS People
from actor
GROUP BY last_name


/* 4b. List last names of actors and the number of actors who have that last name,
 but only for names that are shared by at least two actors */
SELECT last_name, COUNT(last_name) AS People
FROM actor
GROUP BY last_name
HAVING People > 1


/*4C Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS,
 the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record */
 UPDATE actor
 SET first_name = 'HARPO' 
 WHERE first_name = 'GROUCHO' AND last_name = 'WILLIAMS'

 
 /* 4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after
 all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, change
 the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT
 TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! */
UPDATE actor
SET first_name = CASE
				when first_name = 'HARPO'
                THEN 'GROUCHO'
				ELSE 'MUCHO GROUCHO'
	            END
                WHERE actor_id = 172
 select * from actor where last_name ='williams'
 
 
 -- 5. You cannot locate the schema of the address table. Which query would you use to re-create it?
 CREATE TABLE address (address_id int, address varchar(50), address2 varchar(50),
                       district varchar(20), city_id int, postal_code varchar(10),
                       phone varchar(20), location varchar(50), last_update datetime)

-- 6a. Use JOIN to display the first and last names, as well as the address, of each staff member. 
SELECT first_name, last_name, address
FROM staff a JOIN address b ON a.staff_id = b.address_id

 
-- 6b. Use JOIN to display the total amount rung up by each staff member in August of 2005.
SELECT first_name, last_name, amount, payment_date
FROM payment a JOIN staff b ON a.staff_id = b.staff_id
WHERE YEAR(payment_date) = 2005 AND MONTH(payment_date) = 8


--6c. List each film and the number of actors who are listed for that film.
SELECT title, COUNT(actor_id) AS number_of_actors
FROM actor a INNER JOIN film b ON a.actor_id = b.film_id
GROUP BY title
ORDER BY number_of_actors DESC


-- 6d. How many copies of the film Hunchback Impossible exist in the inventory system?
SELECT b.film_id, title, COUNT(inventory_id) AS Copies
FROM film a JOIN inventory b ON a.film_id = b.film_id
WHERE title = 'Hunchback Impossible'


/* 6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer.
 List the customers alphabetically by last name: */
 SELECT a.customer_id, first_name, last_name, SUM(amount) AS Total_Paid
 FROM customer a JOIN payment b ON a.customer_id = b.customer_id
 GROUP BY customer_id
 ORDER BY last_name


/* 7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. 
As an unintended consequence, films starting with the letters K and Q have also soared in popularity.
 Use subqueries to display the titles of movies starting with the letters K and Q whose language is English. */
 
SELECT title 
FROM film
 WHERE title LIKE "k%" OR "Q%" IN (SELECT title 
				                   FROM film
								   WHERE language_id IN (SELECT language_id
                                                         FROM language
                                                         WHERE name = 'English'
                                                         ))
												
                                       
 -- 7b. Use subqueries to display all actors who appear in the film Alone Trip
 SELECT first_name, last_name
 FROM actor
 WHERE actor_id IN (SELECT actor_id
					FROM film_actor
                    WHERE film_id IN (SELECT film_id
                                      FROM film 
                                      WHERE title = 'Alone Trip'))

                                      
/*7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses
 of all Canadian customers. Use joins to retrieve this information. */
 SELECT first_name, last_name, email, country
 FROM customer a JOIN country b ON a.customer_id = b.country_id
 WHERE country = 'Canada' 

 
 /* 7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion.
 Identify all movies categorized as famiy films */ 
 SELECT title, name
 FROM category a JOIN film_category b ON a.category_id = b.category_id JOIN 
 film c on b.film_id = c.film_id
 WHERE name = 'family'
 
 
 -- 7e. Display the most frequently rented movies in descending order 
SELECT a.film_id, title, c.inventory_id, COUNT(c.inventory_id) AS Times_Rented
FROM film a JOIN inventory b ON a.film_id = b.film_id JOIN 
rental c ON b.inventory_id = c.inventory_id
GROUP BY a.film_id
ORDER BY Times_Rented DESC 


-- 7f. Write a query to display how much business, in dollars, each store brought in.
SELECT c.store_id, CONCAT(SUM(amount), '$') AS Total_amount
FROM payment a JOIN staff b ON a.staff_id = b.staff_id JOIN
store c ON b.store_id = c.store_id
GROUP BY c.store_id
ORDER BY Total_amount DESC


-- 7g. Write a query to display for each store its store ID, city, and country.
SELECT store_id, city, country
FROM country a JOIN city b ON a.country_id = b.country_id JOIN 
address c ON b.city_id = c.city_id JOIN 
store d ON c.address_id = d.address_id


-- 7h. List the top five genres in gross revenue in descending order
SELECT name, SUM(amount) AS Gross_Revenue
FROM category a JOIN film_category b ON a.category_id = b.category_id JOIN
inventory c ON b.film_id = c.film_id JOIN rental d ON c.inventory_id  = d.inventory_id JOIN
payment e ON d.rental_id = e.rental_id
GROUP BY name
ORDER BY Gross_Revenue DESC
LIMIT 5


/* 8a. In your new role as an executive, you would like to have an easy way of viewing the
 Top five genres by gross revenue. Use the solution from the problem above to create a view */
 
CREATE VIEW Top_five_genres AS
SELECT name, SUM(amount) AS Gross_Revenue
FROM category a JOIN film_category b ON a.category_id = b.category_id JOIN
inventory c ON b.film_id = c.film_id JOIN rental d ON c.inventory_id  = d.inventory_id JOIN
payment e ON d.rental_id = e.rental_id
GROUP BY name
ORDER BY Gross_Revenue DESC
LIMIT 5


 -- 8b. How would you display the view that you created in 8a?
 SELECT * 
 FROM Top_five_genres
 
 
 -- 8c. You find that you no longer need the view top_five_genres. Write a query to delete it
 DROP VIEW Top_five_genres
